@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Net.Http.Json
@using BlazorPOC.Models;
@using System.Text.Json;
@using Newtonsoft.Json;
@using System.Text;

@page "/users"

<MudGrid>
    <MudItem xs="12" sm="12">
        <MudPaper Class="pa-4 my-5" Elevation="1">
            <MudText Align="Align.Left" Class="mb-4" Style="font-size: 20px; font-weight: bold">Cadastro de usuários</MudText>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField @bind-Value="temp.Nome" Class="mb-4" Margin="Margin.Dense" T="string" Label="Usuário" Required="true" RequiredError="Usuário é obrigatório!" Variant="Variant.Outlined" />
                <MudTextField @bind-Value="temp.Email" Margin=" Margin.Dense" T="string" Label="Email" Required="true" RequiredError="Email é obrigatório!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "O e-mail é inválido"})" Variant="Variant.Outlined" />
 
                <div class="d-flex">
                    <MudRadioGroup @bind-SelectedOption="temp.Tipo" T="string">
                        <MudRadio Option="@("Usuário")">Usuário</MudRadio>
                        <MudRadio Option="@("Administrador")">Administrador</MudRadio>
                    </MudRadioGroup>
                </div>
                <div >
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await CadastrarUsuario())">Cadastrar</MudButton>
                </div>
            </MudForm>
        </MudPaper>

        <!-- Lista de Usuários -->
        <MudTable Items="usuarios" TItem="Usuario" Hover="@hover" Bordered="@bordered" Striped="@striped">
            <ToolBarContent>
                <MudText Style="font-size: 20px; font-weight: bold">Listagem de usuários</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Usuário</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Tipo</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Nome</MudTd>
                <MudTd>@context.Email</MudTd>
                <MudTd>@context.Tipo</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

    </MudItem>
   
</MudGrid>
@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    public List<Usuario> usuarios = new List<Usuario>();
    public Usuario temp = new Usuario();
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    [Inject]
    private HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CarregarUsuarios();
    }

    private async Task CarregarUsuarios()
    {
        try
        {
            string apiUrl = "https://localhost:44379/api-blazor/Users";
            var response = await HttpClient.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                usuarios = JsonConvert.DeserializeObject<List<Usuario>>(content);
            }
            else
            {
                Console.WriteLine($"Erro: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }

    private async Task CadastrarUsuario()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            return;
        }
        try
        {
            string apiUrl = "https://localhost:44379/api-blazor/Users";
            var json = JsonConvert.SerializeObject(temp);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await HttpClient.PostAsync(apiUrl, content);

            if (response.IsSuccessStatusCode)
            {
                await CarregarUsuarios();
                
                temp = new Usuario();
            }
            else
            {
                Console.WriteLine($"Erro: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }
}